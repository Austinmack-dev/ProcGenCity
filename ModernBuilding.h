/*
 Authors: Austin Mack, Tyler Hartwig
 Final Project: Procedurally Generated City
*/
#ifndef CITY_MODERNBUILDING_H
#define CITY_MODERNBUILDING_H

#include <set>
#include "clipper.hpp"
#include "Building.h"
#include "Algebra.h"

using namespace ClipperLib;

/*
 * Building is generated by either unioning or intersecting two random shapes
 * from circle, ellipse, rectangle, or square
 */
class ModernBuilding : public Building{
private:
    std::set<IntPoint> onePoints;
    std::set<IntPoint> twoPoints;
    IntPoint center1, center2;

    double **oneVertcies, **twoVerticies;

    Path one, two;
    ClipType clipType;
    Paths shape;
    Path randomCircle(IntPoint center, int radiusMax);
    Path randomElipse(IntPoint center, int widthMax, int lengthMax);
    Path randomRectangle(IntPoint center, int widthMax, int lengthMax);
    Path randomSquare(IntPoint center, int widthMax);
    void renderTop();
    void renderBase();
public:
    ModernBuilding(int width = 100000, int height = 100000) : Building(width, height){
        randomize();
    }
    void render(int level = -1);
    void randomize();
};


#endif //CITY_MODERNBUILDING_H
